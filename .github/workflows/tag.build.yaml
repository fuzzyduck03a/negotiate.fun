# SPDX-License-Identifier: MIT
name: Release
on:
  push:
    tags:
      - 'v*.*.*'
jobs:
  build_release:
    permissions:
      id-token: write
      contents: read
      attestations: write
    uses: ./.github/workflows/build.yml

  deployRelease:
    runs-on: ubuntu-latest
    needs: build_release
    permissions:
      contents: write
      deployments: write
    name: Deploy to Cloudflare Pages & GitHub
    steps:
      - name: Pull down the build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_release.outputs.artifact-name }}
          run-id: ${{ needs.build_release.outputs.artifact-id }}

      - name: Set outputs
        id: ovars
        env:
          HASH: ${{ github.sha }}
          MSG: ${{ github.ref_name }}
        run: |
          set -x
          {
            echo "sha_short=${HASH}"
            echo "commit_msg=Creating release ${MSG}"
          } > "$GITHUB_OUTPUT"

      - name: Publish a new production release on Cloudflare
        uses: cloudflare/wrangler-action@v3
        id: cloudflare-publish
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy build/client --commit-dirty=true --project-name ${{ vars.CLOUDFLARE_PROJECT_NAME }} --branch production --commit-hash ${{ steps.ovars.outputs.sha_short }} --commit-message "${{ steps.ovars.outputs.commit_msg }}"

      - name: Rename the source archive
        run: mv ${{ needs.build_release.outputs.artifact-name }}.zip source.zip

      - name: Create a dist archive
        run: zip -r dist.zip build/client/*

      - name: Make a Github Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: true
          files: |
            build/client/sbom.spdx.json
            source.zip
            dist.zip